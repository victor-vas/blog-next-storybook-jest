// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[
  `<Post /> should render header, excerpt, cover, metadata and post 1`
] = `
.c6 {
  font-size: 1.6rem;
  color: #AAAAAA;
  font-style: italic;
}

.c6 .categories span::after {
  content: ', ';
}

.c6 .categories span:last-child::after {
  content: '';
}

.c6 a {
  color: #dc143c;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: all 300ms ease-in-out;
  transition: all 300ms ease-in-out;
}

.c6 a:hover {
  -webkit-filter: brightness(50%);
  filter: brightness(50%);
}

.c3 {
  color: #000000;
  line-height: 1.2;
  font-size: 6.4rem;
  text-transform: none;
}

.c1 {
  padding-bottom: 4.0rem;
  margin-bottom: 4.0rem;
  border-bottom: 0.1rem solid #DDDDDD;
}

.c1 .c2 {
  margin: 0;
  margin-bottom: 2.4rem;
}

.c4 {
  margin: 2.4rem 0;
  font-size: 2.4rem;
}

.c5 {
  max-width: 100%;
  display: block;
  margin-bottom: 2.4rem;
}

.c9 {
  font-size: calc(1.6rem + 0.2rem);
  line-height: 1.5;
}

.c9 iframe[src*='ads'] {
  display: none;
}

.c9 p {
  margin: 2.4rem 0;
}

.c9 a,
.c9 a:visited,
.c9 a:link {
  color: #dc143c;
  -webkit-text-decoration: none;
  text-decoration: none;
  -webkit-transition: all 300ms ease-in-out;
  transition: all 300ms ease-in-out;
}

.c9 a:hover {
  -webkit-filter: brightness(50%);
  filter: brightness(50%);
}

.c9 img {
  max-width: 100%;
}

.c9 .image {
  background: #DDDDDD;
  line-height: 0;
  margin: 2.4rem 0;
}

.c9 .image figcaption {
  font-size: 1.6rem;
  padding: 1.6rem;
  text-align: center;
  line-height: 1.3;
}

.c9 .image-style-side {
  max-width: 50%;
  float: right;
  margin: 2.4rem 0;
}

.c9 hr {
  border: none;
  border-bottom: 0.1rem solid #DDDDDD;
}

.c9 ul,
.c9 ol {
  margin: 2.4rem 4.0rem;
}

.c9 .table {
  width: 100%;
  overflow: hidden;
  overflow-x: auto;
}

.c9 table {
  width: 100%;
  border-collapse: collapse;
  margin: 2.4rem 0;
}

.c9 table td,
.c9 table th {
  padding: 1.6rem;
  border: 0.1rem solid #DDDDDD;
}

.c9 blockquote {
  border-left: 0.5rem solid #dc143c;
  color: #AAAAAA;
  -webkit-filter: brightness(80%);
  filter: brightness(80%);
  padding-left: 2.4rem;
  font-style: italic;
  margin: 2.4rem;
}

.c8 pre[class*='language-'],
.c8 code[class*='language-'] {
  color: #d4d4d4;
  font-size: 13px;
  text-shadow: none;
  font-family: Menlo,Monaco,Consolas,'Andale Mono','Ubuntu Mono','Courier New',monospace;
  direction: ltr;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  line-height: 1.5;
  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;
  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

.c8 pre[class*='language-']::selection,
.c8 code[class*='language-']::selection,
.c8 pre[class*='language-'] *::selection,
.c8 code[class*='language-'] *::selection {
  text-shadow: none;
  background: #75a7ca;
}

.c8 pre[class*='language-'] {
  padding: 1em;
  margin: 0.5em 0;
  overflow: auto;
  background: #1e1e1e;
}

.c8:not(pre) > code[class*='language-'] {
  padding: 0.1em 0.3em;
  border-radius: 0.3em;
  color: #db4c69;
  background: #f9f2f4;
}

.c8 .namespace {
  opacity: 0.7;
}

.c8 .token.doctype .token.doctype-tag {
  color: #569cd6;
}

.c8 .token.doctype .token.name {
  color: #9cdcfe;
}

.c8 .token.comment,
.c8 .token.prolog {
  color: #6a9955;
}

.c8 .token.punctuation,
.c8 .language-html .language-css .token.punctuation,
.c8 .language-html .language-javascript .token.punctuation {
  color: #d4d4d4;
}

.c8 .token.property,
.c8 .token.tag,
.c8 .token.boolean,
.c8 .token.number,
.c8 .token.constant,
.c8 .token.symbol,
.c8 .token.inserted,
.c8 .token.unit {
  color: #b5cea8;
}

.c8 .token.selector,
.c8 .token.attr-name,
.c8 .token.string,
.c8 .token.char,
.c8 .token.builtin,
.c8 .token.deleted {
  color: #ce9178;
}

.c8 .language-css .token.string.url {
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.c8 .token.operator,
.c8 .token.entity {
  color: #d4d4d4;
}

.c8 .token.operator.arrow {
  color: #569cd6;
}

.c8 .token.atrule {
  color: #ce9178;
}

.c8 .token.atrule .token.rule {
  color: #c586c0;
}

.c8 .token.atrule .token.url {
  color: #9cdcfe;
}

.c8 .token.atrule .token.url .token.function {
  color: #dcdcaa;
}

.c8 .token.atrule .token.url .token.punctuation {
  color: #d4d4d4;
}

.c8 .token.keyword {
  color: #569cd6;
}

.c8 .token.keyword.module,
.c8 .token.keyword.control-flow {
  color: #c586c0;
}

.c8 .token.function,
.c8 .token.function .token.maybe-class-name {
  color: #dcdcaa;
}

.c8 .token.regex {
  color: #d16969;
}

.c8 .token.important {
  color: #569cd6;
}

.c8 .token.italic {
  font-style: italic;
}

.c8 .token.constant {
  color: #9cdcfe;
}

.c8 .token.class-name,
.c8 .token.maybe-class-name {
  color: #4ec9b0;
}

.c8 .token.console {
  color: #9cdcfe;
}

.c8 .token.parameter {
  color: #9cdcfe;
}

.c8 .token.interpolation {
  color: #9cdcfe;
}

.c8 .token.punctuation.interpolation-punctuation {
  color: #569cd6;
}

.c8 .token.boolean {
  color: #569cd6;
}

.c8 .token.property,
.c8 .token.variable,
.c8 .token.imports .token.maybe-class-name,
.c8 .token.exports .token.maybe-class-name {
  color: #9cdcfe;
}

.c8 .token.selector {
  color: #d7ba7d;
}

.c8 .token.escape {
  color: #d7ba7d;
}

.c8 .token.tag {
  color: #569cd6;
}

.c8 .token.tag .token.punctuation {
  color: #808080;
}

.c8 .token.cdata {
  color: #808080;
}

.c8 .token.attr-name {
  color: #9cdcfe;
}

.c8 .token.attr-value,
.c8 .token.attr-value .token.punctuation {
  color: #ce9178;
}

.c8 .token.attr-value .token.punctuation.attr-equals {
  color: #d4d4d4;
}

.c8 .token.entity {
  color: #569cd6;
}

.c8 .token.namespace {
  color: #4ec9b0;
}

.c8 pre[class*='language-javascript'],
.c8 code[class*='language-javascript'],
.c8 pre[class*='language-jsx'],
.c8 code[class*='language-jsx'],
.c8 pre[class*='language-typescript'],
.c8 code[class*='language-typescript'],
.c8 pre[class*='language-tsx'],
.c8 code[class*='language-tsx'] {
  color: #9cdcfe;
}

.c8 pre[class*='language-css'],
.c8 code[class*='language-css'] {
  color: #ce9178;
}

.c8 pre[class*='language-html'],
.c8 code[class*='language-html'] {
  color: #d4d4d4;
}

.c8 .language-regex .token.anchor {
  color: #dcdcaa;
}

.c8 .language-html .token.punctuation {
  color: #808080;
}

.c8 pre[data-line] {
  position: relative;
}

.c8 pre[class*='language-'] > code[class*='language-'] {
  position: relative;
  z-index: 1;
}

.c8 .line-highlight {
  position: absolute;
  left: 0;
  right: 0;
  padding: inherit 0;
  margin-top: 1em;
  background: #f7ebc6;
  box-shadow: inset 5px 0 0 #f7d87c;
  z-index: 0;
  pointer-events: none;
  line-height: inherit;
  white-space: pre;
}

.c0 {
  width: 100%;
  margin: 0 auto;
  padding: 0 3.2rem;
  max-width: 96rem;
}

.c7 {
  width: 100%;
  margin: 0 auto;
  padding: 0 3.2rem;
  max-width: 80rem;
}

@media (max-width:768px) {
  .c3 {
    font-size: 4.0rem;
  }
}

@media (max-width:768px) {
  .c9 {
    font-size: 2rem;
  }

  .c9 .image-style-side {
    max-width: 100%;
    float: none;
    margin: 0;
  }
}

@media print {
  .c8 pre[class*='language-'],
  .c8 code[class*='language-'] {
    text-shadow: none;
  }
}

<div>
  <article
    class=""
  >
    <div
      class="c0"
    >
      <header
        class="c1"
      >
        <h1
          class="c2 c3"
        >
          React Hooks useState
        </h1>
        <p
          class="c4"
        >
          Hooks são uma nova adição ao React 16.8. Eles permitem que você use o state e outros recursos do React sem escrever uma classe.
        </p>
        <img
          alt="React Hooks useState"
          class="c5"
          src="https://res.cloudinary.com/dg4rnkej8/image/upload/v1616526348/1_v_HH_Bwc_UF_Ua_HW_Xnt_Snq_Kd_CA_c923d6cb48.png"
        />
        <div
          class="c6"
        >
          <p>
            <span>
              Por 
            </span>
            <a
              href="/author/victor"
            >
              Victor
            </a>
            <span
              class="separator"
            >
               | 
            </span>
            <time
              datetime="2020-04-20"
            >
              19 de abr. de 2020
            </time>
            <span
              class="separator"
            >
               | 
            </span>
            <span
              class="categories"
            >
              <span>
                <a
                  href="/category/react"
                >
                  React
                </a>
              </span>
            </span>
          </p>
        </div>
      </header>
    </div>
    <div
      class="c7"
    >
      <div
        class="c8"
      >
        <div
          class="c9"
        >
          <p>
            <span
              style="color:rgb(0,0,0);"
            >
              A 
            </span>
            <a
              href="https://pt-br.reactjs.org/docs/hooks-intro.html"
            >
              página de introdução
            </a>
            <span
              style="color:rgb(0,0,0);"
            >
               usou este exemplo para familiarizar com Hooks:
            </span>
          </p>
          <pre
            class=" language-plaintext"
          >
            <code
              class=" language-plaintext"
            >
              import React, { useState } from 'react';

function Example() {
  // Declarar uma nova variável de state, na qual chamaremos de "count"  const [count, setCount] = useState(0);
  return (
    &lt;div&gt;
      &lt;p&gt;You clicked {count} times&lt;/p&gt;
      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;
        Click me
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
            </code>
          </pre>
          <p
            style="margin-left:0px;"
          >
            Vamos começar a aprender sobre Hooks comparando este código com um exemplo equivalente utilizando classe.
          </p>
          <h2
            style="margin-left:0px;"
          >
            Exemplo Equivalente com Classe
          </h2>
          <p
            style="margin-left:0px;"
          >
            Se você já usou classes no React, este código deve parecer familiar:
          </p>
          <pre
            class=" language-plaintext"
          >
            <code
              class=" language-plaintext"
            >
              class Example extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      count: 0
    };
  }

  render() {
    return (
      &lt;div&gt;
        &lt;p&gt;You clicked {this.state.count} times&lt;/p&gt;
        &lt;button onClick={() =&gt; this.setState({ count: this.state.count + 1 })}&gt;
          Click me
        &lt;/button&gt;
      &lt;/div&gt;
    );
  }
}
            </code>
          </pre>
          <p
            style="margin-left:0px;"
          >
            O state começa como 
            <code>
              { count: 0 }
            </code>
            , e aumentamos o 
            <code>
              state.count
            </code>
             chamando 
            <code>
              this.setState()
            </code>
             quando o usuário clica no botão. Vamos utilizar trechos dessa classe ao longo da página.
          </p>
          <blockquote>
            <p
              style="margin-left:0px;"
            >
              <strong>
                Nota
              </strong>
            </p>
            <p
              style="margin-left:0px;"
            >
              Você pode estar se perguntando porque estamos usando um counter aqui ao invés de um exemplo mais realista. Isto é pra nos ajudar a focar na API enquanto ainda damos os primeiros passos com Hooks.
            </p>
          </blockquote>
        </div>
        ;
      </div>
    </div>
  </article>
</div>
`;
